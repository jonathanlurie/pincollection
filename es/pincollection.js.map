{"version":3,"file":"pincollection.js","sources":["../src/PinCollection.js"],"sourcesContent":["import * as THREE from 'three'\nimport EventManager from '@jonathanlurie/eventmanager'\n\n/**\n * Events expected:\n *\n * - 'onPinCreated': whenever a mesh is loaded. the callback of this event is called with the arg:\n *    @param {THREE.Mesh} mesh - mesh object (of type THREE.Point)\n *    @param {string} id - id of the mesh (as used within this collection)\n *\n * - 'onPinWarning': if a pin is added and the provided id corresponds to an already existing id\n *    @param {String} message - the warning message\n *    @param {String} id - id of the point to be added\n *\n */\nclass PinCollection extends EventManager {\n\n  constructor(threeContext=null){\n    super()\n    let that = this\n    this._threeContext = threeContext\n\n    this._container = new THREE.Object3D()\n    this._container.name = 'meshContainer'\n    this._threeContext.getScene().add(this._container)\n    this._collection = {}\n\n    // // DEBUG\n    // let axesHelper = new THREE.AxesHelper(100)\n    // this._threeContext.getScene().add(axesHelper)\n\n    this._threeContext._raycaster.params.Points.threshold = 500\n\n    this._threeContext._renderer.domElement.addEventListener('dblclick', () => {\n      let intersections = that._threeContext.performRaycast({\n        parent: that._container,\n        emitEvent: false\n      })\n      console.log(intersections)\n\n      if(!intersections)\n        return\n\n      that.emit(intersections[0].object.name, [intersections[0].object.name, intersections[0].position])\n    }, false)\n\n  }\n\n\n  /**\n   * Is a mesh with such id in the collection?\n   * @return {boolean} true if present in collection, false if not\n   */\n  has(id){\n    return (id in this._collection)\n  }\n\n\n  /**\n   * Show the mesh that has such id\n   */\n  show(id){\n    if(id in this._collection){\n      this._collection[id].visible = true\n    }\n  }\n\n\n  /**\n   * Hide the mesh that has such id\n   */\n  hide(id){\n    if(id in this._collection){\n      this._collection[id].visible = false\n    }\n  }\n\n\n  /**\n   * NOT WORKING FOR NOW\n   */\n  detach(id){\n    if(id in this._collection){\n      // this._container\n      let mesh = this._collection[id]\n      this._container.remove(mesh)\n    }\n  }\n\n\n\n\n\n  /**\n   * Load a mesh file from a distant file, with the provided url.\n   * @param {Object} position - object in shape of {x: Number, y: Number, z: Number}\n   * @param {object} options - the options object\n   * @param {number} options.size - size of each point (default: 1000, as the space unit is probably going to be micron)\n   * @param {string} options.id - the id to attribute to the mesh once it will be part of the collection. Automatically generated if not provided\n   * @param {boolean} options.makeVisible - if true, the mesh will be added and made visible once loaded. If false, it's just going to be parsed and will have to be added later using its id (default: true)\n   * @param {string} options.color - the color to apply to the mesh in the format '#FFFFFF' (default: '#FFFFFF', does not apply if a material is given)\n   * @param {Function} options.callback - callback associated with this pin\n   */\n  addPin(position, options = {}){\n    let that = this\n    let id = 'id' in options ? options.id : Math.random().toString().split('.')[1]\n\n    if(id in this._collection){\n      return this.emit('onPinWarning', ['A pin with such id is already loaded.', id])\n    }\n\n    let makeVisible = 'makeVisible' in options ? options.makeVisible : true\n    let color = 'color' in options ? options.color : '#FFFFFF'\n    let size = 'size' in options ? options.size : 1000\n    let constantSize = 'constantSize' in options ? options.constantSize : false\n\n    if('callback' in options){\n      this.on(id, options.callback)\n    }\n\n\n    let material = that._generatePointCloudMaterial(color, size, constantSize)\n    let geometry = new THREE.BufferGeometry()\n    geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( [position.x, position.y, position.z], 3 ) )\n\n    let pin = new THREE.Points( geometry, material )\n\n    pin.name = id\n    pin.visible = makeVisible\n    that._collection[id] = pin\n    that._container.add(pin)\n\n    that.emit('onPinCreated', [pin, id])\n  }\n\n\n  /**\n   * Add a callback to a specific pin\n   * @param {string} id - the id of the pin to add a callback to\n   * @param {Function} cb - the callback\n   */\n  addCallback(id, cb){\n    if(id in this._collection){\n      this.on(id, cb)\n    }\n  }\n\n\n\n  /**\n   *\n   * TEST\n   */\n  addPointCloud(nbPoints=1000, size=100, color='#FF0000', constantSize=false){\n    // https://github.com/mrdoob/three.js/blob/master/examples/webgl_points_sprites.html\n\n    let axesHelper = new THREE.AxesHelper(100)\n    // axesHelper.position.set(geometry.boundingSphere.center.x, geometry.boundingSphere.center.y, geometry.boundingSphere.center.z)\n    this._threeContext.getScene().add(axesHelper)\n\n    let geometry = new THREE.BufferGeometry();\n    let vertices = [];\n    // let textureLoader = new THREE.TextureLoader();\n\n\n    for ( let i = 0; i < nbPoints; i ++ ) {\n      let x = Math.random() * 10000;\n      let y = Math.random() * 10000;\n      let z = Math.random() * 10000;\n      vertices.push( x, y, z )\n    }\n\n    geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) )\n\n    // material\n    var material = this._generatePointCloudMaterial(color, size, constantSize)\n\n    let particles = new THREE.Points( geometry, material )\n\n    this._collection['someparticle'] = particles\n    this._container.add(particles)\n  }\n\n\n  _generatePointCloudMaterial(color='#FFFFFF', pointSize=100, constantSize=false){\n    let shader = {\n      vertex: `\n      uniform float size;\n\n      void main() {\n        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n        gl_PointSize = size ${constantSize ? '' : '* ( size / -mvPosition.z )'};\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n\n      fragment: `\n      uniform vec3 color;\n\n      void main() {\n        vec2 uv = vec2( gl_PointCoord.x -0.5, 1.0 - gl_PointCoord.y-0.5 );\n        float dFromCenter = sqrt(uv.x*uv.x + uv.y*uv.y);\n        float ringStart = 0.35;\n        vec3 ringColor = color * 0.5;\n\n        if(dFromCenter > 0.5){\n          discard;\n        }else if(dFromCenter > ringStart) {\n          gl_FragColor = vec4(ringColor, 1.0);\n        } else {\n          gl_FragColor = vec4(color, 1.0);\n        }\n      }`\n    }\n\n    let uniforms = {\n      size: { value: pointSize},\n      color: { type: \"c\", value: new THREE.Color(color) },\n    }\n\n    // material\n    var material = new THREE.ShaderMaterial( {\n      uniforms:       uniforms,\n      vertexShader:   shader.vertex,\n      fragmentShader: shader.fragment,\n      transparent:    false,\n      // blending: THREE.AdditiveBlending,\n      //depthTest: false, // default: true\n    })\n\n    return material\n  }\n\n\n}\n\nexport default PinCollection\n"],"names":["THREE.Object3D","THREE.BufferGeometry","THREE.Float32BufferAttribute","THREE.Points","THREE.AxesHelper","THREE.Color","THREE.ShaderMaterial"],"mappings":"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"}